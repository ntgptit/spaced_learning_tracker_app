import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:riverpod_annotation/riverpod_annotation.dart';
import 'package:spaced_learning_app/presentation/screens/auth/forgot_password_screen.dart'; // <<--- ADDED Import
import 'package:spaced_learning_app/presentation/screens/auth/login_screen.dart';
import 'package:spaced_learning_app/presentation/screens/auth/register_screen.dart';
import 'package:spaced_learning_app/presentation/screens/main/main_screen.dart';
import 'package:spaced_learning_app/presentation/viewmodels/auth_viewmodel.dart';
import 'package:spaced_learning_app/presentation/viewmodels/bottom_navigation_provider.dart';
import 'package:spaced_learning_app/presentation/widgets/common/slt_app_bar.dart';
import 'package:spaced_learning_app/presentation/widgets/common/slt_scaffold.dart';
import 'package:spaced_learning_app/presentation/widgets/states/slt_empty_state_widget.dart';
import 'package:spaced_learning_app/presentation/widgets/states/slt_error_state_widget.dart';
import 'package:spaced_learning_app/presentation/widgets/states/slt_loading_state_widget.dart';
import 'package:spaced_learning_app/presentation/widgets/states/slt_maintenance_state_widget.dart';
import 'package:spaced_learning_app/presentation/widgets/states/slt_offline_state_widget.dart';
import 'package:spaced_learning_app/presentation/widgets/states/slt_unauthorized_state_widget.dart';

import '../../presentation/screens/books/book_detail_screen.dart';
import '../../presentation/screens/learning/module_detail_screen.dart';

part 'app_router.g.dart'; // Assuming this is generated by riverpod_generator for the provider below

class AppRoutes {
  static const splash = '/splash';
  static const login = '/login';
  static const register = '/register';
  static const forgotPassword = '/forgot-password'; // <<--- ADDED Route Name
  static const main = '/main';
  static const home =
      '/home'; // Typically a sub-route of main if using ShellRoute
  static const books = '/books'; // Typically a sub-route of main
  static const bookDetail = '/books/:id';
  static const moduleDetail = '/modules/:id';
  static const due = '/due'; // Typically a sub-route of main
  static const stats = '/stats'; // Typically a sub-route of main
  static const profile = '/profile'; // Typically a sub-route of main
  static const settings = '/settings';
  static const cardsExample = '/examples/cards';

  static const exampleEmptyState = '/examples/states/empty';
  static const exampleErrorState = '/examples/states/error';
  static const exampleLoadingState = '/examples/states/loading';
  static const exampleOfflineState = '/examples/states/offline';
  static const exampleMaintenanceState = '/examples/states/maintenance';
  static const exampleUnauthorizedState = '/examples/states/unauthorized';
  static const exampleComingSoonState = '/examples/states/coming-soon';
  static const exampleGenericError = '/examples/states/generic-error';
}

String? _authRedirect(bool isAuthenticated, String locationPath) {
  final isAuthRoute =
      locationPath == AppRoutes.login ||
      locationPath == AppRoutes.register ||
      locationPath == AppRoutes.forgotPassword; // Include forgotPassword
  final isSplash = locationPath == AppRoutes.splash;
  final isExampleRoute = locationPath.startsWith('/examples');

  if (isSplash || isExampleRoute) return null;
  if (isAuthRoute && !isAuthenticated) return null;

  if (isAuthenticated && isAuthRoute) return AppRoutes.main;

  if (!isAuthenticated && !isAuthRoute) return AppRoutes.login;

  return null; // No redirect needed
}

@Riverpod(
  keepAlive: true,
) // Ensure keepAlive is appropriate for your app's router
GoRouter appRouter(Ref ref) {
  final authState = ref.watch(authStateProvider);
  final bottomNavTab = ref.watch(
    bottomNavigationStateProvider,
  ); // Used for MainScreen key

  final isAuthenticated = authState.maybeWhen(
    data: (authenticated) => authenticated,
    orElse: () => false, // Assume not authenticated if loading or error
  );

  return GoRouter(
    debugLogDiagnostics: true,
    initialLocation: AppRoutes.main,
    redirect: (context, state) {
      return _authRedirect(isAuthenticated, state.uri.path);
    },
    routes: [
      GoRoute(
        path: AppRoutes.main,
        pageBuilder: (context, state) => NoTransitionPage(
          key: ValueKey('main-${bottomNavTab.index}'),
          child: MainScreen(tab: bottomNavTab),
        ),
      ),
      GoRoute(
        path: AppRoutes.login,
        pageBuilder: (context, state) =>
            const MaterialPage(child: LoginScreen()),
      ),
      GoRoute(
        path: AppRoutes.register,
        pageBuilder: (context, state) =>
            const MaterialPage(child: RegisterScreen()),
      ),
      GoRoute(
        path: AppRoutes.forgotPassword,
        pageBuilder: (context, state) =>
            const MaterialPage(child: ForgotPasswordScreen()),
      ),
      GoRoute(
        path: AppRoutes.bookDetail,
        pageBuilder: (context, state) {
          final bookId = state.pathParameters['id'] ?? '';
          return MaterialPage(
            key: state.pageKey,
            child: BookDetailScreen(bookId: bookId),
          );
        },
      ),
      GoRoute(
        path: AppRoutes.moduleDetail,
        pageBuilder: (context, state) {
          final moduleId = state.pathParameters['id'] ?? '';
          return MaterialPage(
            key: state.pageKey,
            child: ModuleDetailScreen(moduleId: moduleId),
          );
        },
      ),

      GoRoute(
        path: AppRoutes.exampleEmptyState,
        pageBuilder: (context, state) => MaterialPage(
          child: SltScaffold(
            appBar: const SltAppBar(
              title: 'Empty State Example',
              showBackButton: true,
            ),
            body: SltEmptyStateWidget.noData(
              title: 'No Items Found',
              message:
                  'There are currently no items to display. Try adding some!',
              buttonText: 'Add Item',
              onButtonPressed: () => debugPrint('Add Item Tapped'),
            ),
          ),
        ),
      ),
      GoRoute(
        path: AppRoutes.exampleErrorState,
        pageBuilder: (context, state) => MaterialPage(
          child: SltScaffold(
            appBar: const SltAppBar(
              title: 'Error State Example',
              showBackButton: true,
            ),
            body: SltErrorStateWidget.serverError(
              details:
                  'The server failed to process your request (Error 500). Please try again later.',
              onRetry: () => debugPrint('Retry Tapped'),
            ),
          ),
        ),
      ),
      GoRoute(
        path: AppRoutes.exampleLoadingState,
        pageBuilder: (context, state) => MaterialPage(
          child: SltLoadingStateWidget.fullScreen(
            message: 'Fetching latest data, please wait...',
            showAppBar: true,
            appBarTitle: 'Loading Example',
            dismissible: true,
          ),
        ),
      ),
      GoRoute(
        path: AppRoutes.exampleOfflineState,
        pageBuilder: (context, state) => MaterialPage(
          child: SltOfflineStateWidget.contentUnavailable(
            title: 'Content Offline',
            message:
                'This content requires an internet connection. Please connect and refresh.',
            onRetry: () => debugPrint('Refresh Offline Content Tapped'),
            showAppBar: true,
            appBarTitle: 'Offline Example',
            onNavigateBack: () => context.pop(),
          ),
        ),
      ),
      GoRoute(
        path: AppRoutes.exampleMaintenanceState,
        pageBuilder: (context, state) => MaterialPage(
          child: SltMaintenanceStateWidget.scheduled(
            title: 'App Update In Progress',
            startTime: DateTime.now().subtract(const Duration(hours: 1)),
            endTime: DateTime.now().add(const Duration(hours: 2)),
            details:
                'We are rolling out new features and improvements. The app will be back online soon.',
            showAppBar: true,
            appBarTitle: 'Maintenance Mode',
            onNavigateBack: () => context.pop(),
            onRetryIfActive: () => debugPrint('Check Status Tapped'),
          ),
        ),
      ),
      GoRoute(
        path: AppRoutes.exampleUnauthorizedState,
        pageBuilder: (context, state) => MaterialPage(
          child: SlUnauthorizedStateWidget.insufficientPermissions(
            title: 'Premium Feature',
            message:
                'This feature is only available for premium users. Upgrade your account to access it.',
            onRequestAccess: () => debugPrint('Upgrade to Premium Tapped'),
            onGoBack: () => context.pop(),
            showAppBar: true,
            appBarTitle: 'Access Denied',
          ),
        ),
      ),
      GoRoute(
        path: AppRoutes.exampleGenericError,
        pageBuilder: (context, state) => throw Exception(
          'This is a test error to show the generic error page.',
        ),
      ),
    ],
    errorPageBuilder: (context, state) {
      debugPrint('GoRouter Error: ${state.error}');
      debugPrint('GoRouter Error Location: ${state.uri}');
      return MaterialPage(
        key: state.pageKey,
        child: SltErrorStateWidget.custom(
          title: 'Oops! Something Went Wrong',
          message:
              'We encountered an unexpected issue. The page at "${state.uri}" might be broken or doesn\'t exist. \n\nError: ${state.error?.toString() ?? 'Unknown error'}',
          icon: Icons.sentiment_very_dissatisfied_rounded,
          retryText: 'Go to Home',
          onRetry: () => context.go(AppRoutes.main),
          showAppBar: true,
          appBarTitle: 'Page Error',
          onNavigateBack: () => context.go(AppRoutes.main),
        ),
      );
    },
  );
}
